// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum SessionStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum IntervalType {
  WORK
  SHORT_BREAK
  LONG_BREAK
}

model User {
  id Int @id @default(autoincrement())
  email String @unique
  password String
  createdAt DateTime @default(now())
  // Relations
  sessions PomodoroSession[]
  tasks Task[]
  settings UserSetting?
}

model Task {
  id Int @id @default(autoincrement())
  userId Int
  name String
  description String
  status TaskStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relations
  user User @relation(fields: [userId], references: [id])
  intervals PomodoroInterval[]
}

model PomodoroSession {
  id Int @id @default(autoincrement())
  userId Int
  startTime DateTime
  endTime DateTime?
  status SessionStatus @default(IN_PROGRESS)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relations
  user User @relation(fields: [userId], references: [id])
  intervals PomodoroInterval[]
}

model PomodoroInterval {
  id Int @id @default(autoincrement())
  sessionId Int
  taskId Int
  startTime DateTime
  endTime DateTime?
  type IntervalType @default(WORK)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relations
  session PomodoroSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  task Task @relation(fields: [taskId], references: [id])
}

model UserSetting {
  id Int @id @default(autoincrement())
  userId Int @unique
  pomodoroDuration Int @default(25)
  shortBreakDuration Int @default(5)
  longBreakDuration Int @default(15)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relations
  user User @relation(fields: [userId], references: [id])
}
